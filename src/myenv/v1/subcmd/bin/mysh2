#!/usr/bin/python3
# -*- coding:utf-8 -*-

# 安装第三方的包：
# 查询pip支持的包：https://pypi.org/
# 目前 pty/termios 在pip3中都不支持。
# 只有安装pymux时，会自带有这些库！
# pip2/3 install pymux

# 模仿程序script来实现, 参考pymux。
# script 是 util-linux 中的一个工具。
# https://github.com/prompt-toolkit/pymux

# 创建pty，然后再fork一个进程（shell），通过pty控制shell。
# stty -a 可以查看当前终端的attr

# 测试注意
# 启动bash后，Ctrl+H等快捷键、vi、man、top、ctrl+z等功能。
# 改变窗口大小后，用stty -a查看终端大小是否发生改变。
# exit/ctrl+D退出shell后，再输入命令和查看man/vi是否正常。

import os, sys, locale, time, struct, getopt, shutil
import select, fcntl, posix, signal
import pyte, pty, termios
import errno

# 保存的之前的终端设定。
original_pty_attr = None

def on_exit():
    # 关闭进程时，必须恢复之前的终端设定，否则将让父进程的控制台输入无回显。
    global original_pty_attr
    termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, original_pty_attr)

# 下面的类实现基本的 虚拟终端，
# 但是按照原理，它无法分析出命令和结果，
# 因为parent process看到的文字，都是 child 输出的，包括命令和操作本身，还有PS1。
class MyShellBase(object):

    def __init__(self):
        self.child_pid = -1
        self.master_fd = -1
        self.win_size = None

    def print_str(self, str):
        sys.stdout.write(str)
        sys.stdout.flush()

    def on_signal(self, signum, frame):

        if self.child_pid == -1:
            return

        if signum == signal.SIGCHLD:
            # wait for child process terminating.
            os.waitpid(self.child_pid, 0)
            sys.exit()
        elif signum == signal.SIGTERM or signum == signal.SIGINT or signum == signal.SIGQUIT:
            # send SIGTERM to child.
            os.kill(self.child_pid, signal.SIGTERM)
        elif signum == signal.SIGWINCH:
            # set WINSIZE of child.
            size = struct.pack('HHHH', 0, 0, 0, 0)
            size = fcntl.ioctl(sys.stdin.fileno(), termios.TIOCGWINSZ, size)  # get size
            # 修改master_fd的窗口大小，就是修改slave_fd的窗口大小。
            fcntl.ioctl(self.master_fd, termios.TIOCSWINSZ, size)  # set size
        else:
            sys.exit(1)

    def start(self, shell_exe, shell_args):
        global original_pty_attr

        # 保存当前终端的attr，为了后面恢复。
        original_pty_attr = termios.tcgetattr(sys.stdin.fileno())

        # 设定进程关闭后的动作。
        sys.exitfunc = on_exit

        win_size = struct.pack('HHHH', 0, 0, 0, 0)
        win_size = fcntl.ioctl(sys.stdin.fileno(), termios.TIOCGWINSZ, win_size)  # get win_size

        self.child_pid, self.master_fd = os.forkpty()

        if self.child_pid == 0:  # in child process
            fcntl.ioctl(sys.stdin.fileno(), termios.TIOCSWINSZ, win_size)  # set win_size
            os.execv(shell_exe, shell_args)

        else:  # in parent proces
            signal.signal(signal.SIGCHLD, self.on_signal)
            signal.signal(signal.SIGWINCH, self.on_signal)
            signal.signal(signal.SIGTERM, self.on_signal)
            signal.signal(signal.SIGINT, self.on_signal)
            signal.signal(signal.SIGQUIT, self.on_signal)

            # 非常规输入。
            tc_attr = termios.tcgetattr(sys.stdin.fileno())
            tc_attr[3] = tc_attr[3] & ~termios.ICANON & ~termios.ECHO & ~termios.ISIG
            tc_attr[6][termios.VMIN] = 1
            tc_attr[6][termios.VTIME] = 0
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, tc_attr)

            while True:
                try:
                    # 这里就应该是sys.stdin，而不是sys.stdin.fileno(), 而master_fd则必须是fd。 奇怪！
                    rs, ws, es = select.select([sys.stdin, self.master_fd], [], [], 1)
                    for s in rs:
                        if s == sys.stdin:  # 来自控制台的输入，是用户的命令
                            ch = os.read(sys.stdin.fileno(), 1024) # <--- TODO 有大小，是否不应该要！
                            if len(ch) < 1024:
                                self.on_input_end(ch)
                            os.write(self.master_fd, ch)

                        else:  # 来自SHELL的输出，是用户命令执行的结果。
                            # 得到运行结果
                            try:
                                str_rlt = os.read(self.master_fd, 2048) # <--- TODO 有大小，是否不应该要！
                                
                                # 调用结果的回调函数
                                is_end = False
                                if len(str_rlt) < 2048:
                                    is_end = True
                                self.on_output_end(str_rlt, is_end)
                                
                                # 显示结果
                                self.print_str(str_rlt)
                            except BaseException as err:
                                # 如果子进程销毁，这里简单的用一个异常捕获，应该用信号捕获。
                                self.print_str("subprocess failed.\n")
                                print(err)
                                sys.exit()
                # 虽然signal设定了信号处理函数，但是select还是会被打断！ 但是还需要等待 CHILD 关闭。
                except select.error as error:
                    # select一般的异常都是被打断，就是EINTR错误，可以用“if _errno == errno.EINTR:”来判断。
                    #self.print_str("select exception.")
                    pass

                except:
                    # 这是真正的子进程被关闭。
                    #self.print_str("subprocess close.")
                    break
    
    def on_input_end(self, str):
        # 当输入命令时
        pass

    def on_output_end(self, str, is_end):
        # 当输出命令时
        pass

# Fifo
class Fifo(object):

    def __init__(self, max_count):
        self.max_count = max_count
        self.array = []

    def save(self, data):
        if len(self.array) >= self.max_count - 1:
            self.array.pop(0)

        self.append(data)

    def count(self):
        return len(self.array)

    def get_data(self, index):
        # index 是从最近开始的索引，不是array的索引。[0, )
        i = len(self.array) - 1 - index
        if index < 0:
            return None
        
        return self.array[i]

# 轮流使用内部的数据。
class LoopArray(object):

    #for i in range(save_count):
            #input = os.tmpfile()
            #output = os.tmpfile()
            #input = os.open(os.tmpnam(), os.O_RDWR|os.O_CREAT)
            #output = os.open(os.tmpnam(), os.O_RDWR|os.O_CREAT)
    #        name = "/tmp/tmp_%s_i" % i
    #        input = open(name, "w+")
    #        name = "/tmp/tmp_%s_o" % i
    #        output = open(name, "w+")
    #        self.saved.append([input, output])

    def __init__(self):
        self.array = []
        # 最近可以写入数据的位置
        self.current = 0

    def append(self, data):
        self.array.append(data)

    # 移动到下一个位置
    def next(self):
        self.current += 1
        if self.current >= len(self.array):
            self.current -= len(self.array)+1

    # 得到当前位置的数据
    def get(self):
        return self.array[self.current]

    def get_data(self, index):
        # index 是从最近开始的索引，不是array的索引。[0, )
        i = len(self.array) - 1 - index
        if index < 0:
            return None
        
        return self.array[i]

# 以行为单位的文件
class LineArray(object):
    def __init__(self, max_count):
        self.array = []

        #self.file_path = "/tmp/tmp_%s_i" % 1
        #self.tmp_file = open(self.file_path, "w+")
        self.max_count = max_count

    def save(self, data):
        lines = data.split("\n", -1)

        for i in range(len(lines)):
            if len(self.array) == 0:
                self.array.append(lines[i])
            else:
                if i == 0:
                    self.array[0] = lines[0] + self.array[0]
                else:
                    self.array.insert(0, lines[i])

        while len(self.array) >= self.max_count:
            del self.array[0]

    def get(self, line_no):
        return self.array[line_no+1]

    def print_all(self):
        for i in range(len(self.array)):
            print(" %d:%s" % (i, self.array[i]))
        

# 将输入的命令和结果保存的Shell
class MyShell(MyShellBase):
    def __init__(self, save_count):
        super(MyShell, self).__init__()

        self.saved = LineArray(save_count)
        #self.saved = LoopArray()        

        #self.is_start = True

    def on_input_end(self, str):
        # 当输入命令时
        #input_output = self.saved.get()

        #input_output[0].write(str)
        if str == "z":
            print( self.saved.print_all() )

    def on_output_end(self, str, is_end):

        #input_output = self.saved.get()
        #if input_output is None:
        #    return

        #if self.is_start:
        #    #os.truncate(input_output[1], 0)
        #    input_output[1].truncate()
        #    self.is_start = False

        #input_output[1].write(str)
        #
        #if is_end:
        #    self.saved.next()
        #    self.is_start = True
        self.saved.save(str)

def usage():
    print("myenv mysh2:")
    print("  new my shell implementation.")
    print("  -h/--help : show help information.")

def main(argv):
    locale.setlocale(locale.LC_ALL, locale='en_US.UTF-8')

    # 分析命令参数
    try:
        opts, args = getopt.getopt(argv[1:], 'h', ['help'])
    except getopt.GetoptError as err:
        print("{0}".format(err))
        usage()
        sys.exit(1)

    for o, a in opts:
        if o in ('-h', '--help'):
            # 显示帮助信息
            usage()
            sys.exit(0)
    
        else:
            print('unknown arguments "%s"', o)
            usage()
            sys.exit(1)

    # 进入新的mysh2。
    shell = MyShell(10)
    shell.start('/bin/bash', [' -i'])

if __name__ == '__main__':
    main(sys.argv)
